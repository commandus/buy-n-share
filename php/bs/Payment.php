<?php
// automatically generated by the FlatBuffers compiler, do not modify

namespace bs;

use \Google\FlatBuffers\Struct;
use \Google\FlatBuffers\Table;
use \Google\FlatBuffers\ByteBuffer;
use \Google\FlatBuffers\FlatBufferBuilder;

class Payment extends Table
{
    /**
     * @param ByteBuffer $bb
     * @return Payment
     */
    public static function getRootAsPayment(ByteBuffer $bb)
    {
        $obj = new Payment();
        return ($obj->init($bb->getInt($bb->getPosition()) + $bb->getPosition(), $bb));
    }

    /**
     * @param int $_i offset
     * @param ByteBuffer $_bb
     * @return Payment
     **/
    public function init($_i, ByteBuffer $_bb)
    {
        $this->bb_pos = $_i;
        $this->bb = $_bb;
        return $this;
    }

    public function getFridge()
    {
        $obj = new Fridge();
        $o = $this->__offset(4);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    public function getUser()
    {
        $obj = new User();
        $o = $this->__offset(6);
        return $o != 0 ? $obj->init($this->__indirect($o + $this->bb_pos), $this->bb) : 0;
    }

    /**
     * @return uint
     */
    public function getStart()
    {
        $o = $this->__offset(8);
        return $o != 0 ? $this->bb->getUint($o + $this->bb_pos) : 0;
    }

    /**
     * @return int
     */
    public function getTotal()
    {
        $o = $this->__offset(10);
        return $o != 0 ? $this->bb->getInt($o + $this->bb_pos) : 0;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return void
     */
    public static function startPayment(FlatBufferBuilder $builder)
    {
        $builder->StartObject(4);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return Payment
     */
    public static function createPayment(FlatBufferBuilder $builder, $fridge, $user, $start, $total)
    {
        $builder->startObject(4);
        self::addFridge($builder, $fridge);
        self::addUser($builder, $user);
        self::addStart($builder, $start);
        self::addTotal($builder, $total);
        $o = $builder->endObject();
        return $o;
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addFridge(FlatBufferBuilder $builder, $fridge)
    {
        $builder->addOffsetX(0, $fridge, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addUser(FlatBufferBuilder $builder, $user)
    {
        $builder->addOffsetX(1, $user, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param uint
     * @return void
     */
    public static function addStart(FlatBufferBuilder $builder, $start)
    {
        $builder->addUintX(2, $start, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @param int
     * @return void
     */
    public static function addTotal(FlatBufferBuilder $builder, $total)
    {
        $builder->addIntX(3, $total, 0);
    }

    /**
     * @param FlatBufferBuilder $builder
     * @return int table offset
     */
    public static function endPayment(FlatBufferBuilder $builder)
    {
        $o = $builder->endObject();
        return $o;
    }
}
